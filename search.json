[{"title":"C-code","date":"2022-02-22T03:33:31.000Z","url":"/2022/02/22/C-code/","categories":[[" ",""]],"content":"c语言指针 名 语法 左值 可在‘&#x3D;‘左边的值，即为可修改的值（或者说变量？） 指针声明 int *p,n; p&#x3D;&amp;n 统配类指针 void *指针变量名，任何类型的指针都能与 void 类型的指针互相赋值 指针运算 指针的增&#x2F;减会向前&#x2F;后跳跃指针类型长度的字节数 数组指针 指针变量名 &#x3D; 数组起始地址（即数组名） 指针参数 以地址为值传入指针参数，会修改原变量所以称输出参数 返回指针的函数 类型名* 指针变量名（形式参数表） 数组参数 参数形式int arr[] 值 数组地址或者数组名。但一般用指针参数不用数组参数，传值方式一样 动态内存(堆) int *p1 &#x3D; (int *)malloc(sizeof(int)) int *array &#x3D; (int *)calloc(10,sizeof(int)) 一定要释放堆需要手动释放堆内存空间，如果在一个函数内开空间函数结束也不会自动释放空间。 释放堆free(p1) 或 free(array) (好习惯：释放完将该指针指向NULL，p1&#x3D;NULL;) 字符串与指针 char *ch &#x3D; “hello,world” 此时字符串为常量保存在程序中，然后将字符串首地址存入指针，很像字符数组和指针的关系，但不可修改字符串的内容,且不可输入。如果想要传参，如同一般指针传参就好 参数形式 char *ch，值为保存在指针的地址 ch 函数返回字符串 返回一个存有字符串的动态变量或者全局变量的地址，或者是上一个函数中的局部变量但不能是此函数中的局部变量 指针数组 int *n[数组长度] 多级指针 **访问只需要一个***，int x&#x3D;15, *p&#x3D;&amp;x, **q&#x3D;&amp;p; 二级指针q先访问q中的地址，再访问该地址的指针变量存入的地址，共访问两次所以为二级指针。 动态的二维数组 因为二维数组是二级指针，所以将一维数组的指针改为二维即可，即*变为** 定义函数指针 **返回类型 (*指针变量)(形式参数表)**;double (*p2)(int); 赋值函数指针 指针变量名 &#x3D; 函数名 回调函数 一个函数的参数为函数或函数指针，这个函数参数就称为回调函数。即别的函数执行时调用此函数，此函数称为回调函数 函数指针 数组 (*func[3])()&#x3D;{NULL, add, erase}; 注意事项！！！： 避免使用悬空指针（被释放的动态内存）和未初始化的指针 不同类型的指针之间不能赋值 数组和指针是完全不同的，数组变量存放一组同类元素，指针变量中存放一个地址 值传递是将某个类型的数值传给函数，指针传递是将某个变量的地址传给函数有了指针传递，函数的参数被分为两类：输入参数和输出参数在设计函数原型时，通常将输入参数排在前面，输出参数排在后面。 返回指针的函数必须确保返回值指向的变量在函数执行结束时依然存在 使用动态变量时必须严格防止内存泄露 指针指向的字符串为字符串常量的地址，只可以修改指针的指向，不可修改字符串 "},{"title":"Hello World","date":"2022-02-22T03:00:39.616Z","url":"/2022/02/22/hello-world/","categories":[[" ",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]