[{"title":"正则表达式","date":"2022-05-18T13:29:06.000Z","url":"/2022/05/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","tags":[["linux","/tags/linux/"]],"categories":[[" ",""]],"content":"简介正则表达式是一种匹配文本字符串的方式，一般用来检索、替换那些符合所要求的文本字符串。要注意：不同的工具，不同的编程语言，其正则表达式都略有差异。此文以POSIX标准(大部分命令行工具的标准)来介绍 grepgrep是Linux中的一个命令程序，名为全局正则表达式输出，一般用来列出匹配的文本字符串等。 文本字符与元字符grep zip 该命令的意思为列出匹配zip字符串的文本等条目。在这里zip为最基本的文本字符，而接下来要介绍的则是元字符。 元字符就是将一些特殊符号转为特殊意义 元字符 特殊意义 . 代指任意字符 ^ 锚点，表示行首 $ 锚点，表示行尾 [] 方括号内的为待匹配字符,^在最前面表示否定，-表示范围 * 表示前面的元素会匹配0次或多次 注意 上面的元字符为BRE标准，下面为ERE,BRE需要\\转义 ? 表示前面的元素会匹配0次或1次 + 表示前面的元素会匹配1次或多次 {} 匹配指定次数,{n,m}匹配n次或至少n次,至多m次 () 将元素集合为一个元素(组) | 表示多选，‘或’的意思 POSIX字符类有时候会遇到不是按ASCII码标准的词序，而是使用aAbB..zZ；这时候用a-z表示小写字母范围则会出错，为了解决这个问题POSIX提供了一种字符类来表示范围。 字符类 描述 [:alnum:] 字母和数字字符 [:word:] 在alnum的基础上加入下划线 [:alpha:] 字母字符 [:blank:] 空格符和制表符 [:cntrl:] ASCII的控制字符 [:digit:] 数字0～9 [:graph:] 可见字符 [:lower:] 小写字符 [:punct:] 标点符号字符 [:print:] 可输出字符 [:space:] 空白字符 [:upper:] 大写字符 [:xdigit:] 用于表示十六进制数值字符 "},{"title":"位运算","date":"2022-04-15T21:30:08.000Z","url":"/2022/04/16/%E4%BD%8D%E8%BF%90%E7%AE%97/","tags":[["c","/tags/c/"]],"categories":[[" ",""]],"content":"位运算C语言可以对二进制位进行运算，称为位运算 运算符 &amp; | ~ ^ &lt;&lt; &gt;&gt; 名称 与 或 非 异或 左移 右移 用处 取1 化1 全反 取反 取乘 取除 与1 &amp; 0 = 00 &amp; 0 = 01 &amp; 1 = 1总结：当第一位与 第二位都为1则运算得1 或1 | 0 = 10 | 0 = 01 | 1 = 1总结：当第一位或 第二位之中有一位为1则运算得1 非~100 = 011~001 = 110~010 = 101总结：对每一位非运算，将每一位值取反；即0取1，1取0 异或1 ^ 0 = 10 ^ 0 = 01 ^ 1 = 0总结：当第一位与第二位相异则运算得1 左移 右移1 &lt;&lt; 2 = B100 =O4B100 &gt;&gt; 2 = 1 总结：左移是将一个数的二进制值中的每个位向左移动n位,不够则补零。十进制运算结果相当于乘以2的n次方。右移反之，即结果相当于除以2的次方，不计算余数 tips: 使用左移右移运算，比直接乘除操作执行速度要更快，会提高程序运行速度"},{"title":"链表","date":"2022-04-05T08:21:51.000Z","url":"/2022/04/05/%E9%93%BE%E8%A1%A8/","tags":[["c","/tags/c/"]],"categories":[[" ",""]],"content":"链表链表是一种数据结构,用于存储数据，基本原理大概为： 当前节点存储数据，并在节点中存入下一节点地址，可以通过当前节点访问下一节点，实现一环扣一环 代码： 该段代码简易还原了c语言单链表的实现，链表还有很多操作，例如：增删改查…"},{"title":"sqlmap","date":"2022-03-02T10:23:31.000Z","url":"/2022/03/02/sqlmap/","tags":[["sql","/tags/sql/"]],"categories":[[" ",""]],"content":"sqlmap常用命令sqlmap 基础 sqlmap -u “url（网站）” 查询是否存在注入点 --dbs [检测站点有那些数据库 ] --current-db [检测当前使用的数据库名 ] --tables -D “db_name” [列出指定数据库的所有表名,-D后面接数据库名称] --columns -T “table_name” -D “db_name” [列出指定数据库中指定数据表的列(字段)] --dump -C “columns_name” -T “table_name” -D “db_name”i [列出数据表中的行（内容）] 常用指令 指令 作用 --purge 重新扫描，会删除原先扫描记录 --tables 获取表名 --dbs 检测站点包含哪些数据库 --current-db 获取当前的数据库名 --current-user 检测当前用户 --is-dba 判断站点的当前用户是否为数据库管理员 --batch 默认确认，不询问你是否输入 --search 后面跟参数 -D -T -C搜索列（C），表（T）和数据库名称（D） --threads 10 线程，参数后空格接数字，sqlmap线程最高设置为10 --level 3 sqlmap默认测试所有的GET和POST参数，当--level的值大于等于2的时候也会测试HTTP Cookie头的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。最高为5 --risk 3 执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全 --privileges 查看权限 --proxy “目标地址″ 使用代理注入 "},{"title":"IPV4基础","date":"2022-02-27T11:03:37.000Z","url":"/2022/02/27/IP%E5%9F%BA%E7%A1%80/","tags":[["internet","/tags/internet/"]],"categories":[[" ",""]],"content":"IPV4：ip地址由32位二进制组成；一般被分为4组，每组8位；我们看到的一般写为十进制 IPV4结构：ip地址被分为 网络位和主机位，通过子网掩码区别划分，网络位称为网段，由对应子网掩码为1的位组成，而主机位则是后面对应为0的部分； 网络号 与 广播号： 特殊的IP地址: 由上述内容我们知道，IP是由网络位和主机位组成；但有两个特殊情况，如主机位全为1 或 0 。当主机位全为1时，我们将其称之为广播号，目标IP地址为广播号时，会将数据传输至该网络中的每一台主机；而当主机位全为0时，我们将其称之为网络号，此IP地址代表这个网络。 IP地址的分类： 一般我们会将IP地址分为ABCDE五类，而常用的一般为ABC三类，剩下两类一般用于特殊用途。 类别 范围 对应掩码 位数 A 1~126 255.0.0.0 /8 B 128~191 255.255.0.0 /16 C 192~223 255.255.255.0 /24 可变长的子网掩码： 直接举例吧： ip：172.16.31.0 /20 二进制：10101100.00010000.00100000.00000000 子网： 11111111.11111111.11110000.000000000 网段有20位，不在abc三类之内。"},{"title":"linux-日常命令","date":"2022-02-23T03:19:56.000Z","url":"/2022/02/23/linux-%E6%97%A5%E5%B8%B8%E5%91%BD%E4%BB%A4/","tags":[["linux","/tags/linux/"]],"categories":[[" ",""]],"content":"命令大全操作文件和目录（即文件夹） 命令 作用 参数 mkdir 创建目录（即文件夹） cp 复制 i提示确认r文件类型u只复制不存在及更新v相关信息 mv 移动/重命名 i提示确认u只移动不存在及更新v相关信息 rm 删除 i提示确认r文件类型f忽略不存在v相关信息 ln (-s) 创建硬链接（符号链接） 程序（命令）命令 命令 作用 参数 type 显示命令类型。 which 显示可执行命令的位置。 help 获取Shell内建命令的帮助信息。 man 显示命令的手册页。 apropos 显示适合的命令清单。 whatis 显示手册页的简述。 info 显示命令的info条目。 alias 创建自己的命令。 "},{"title":"C-code-指针基础","date":"2022-02-22T03:33:31.000Z","url":"/2022/02/22/C-code/","tags":[["c","/tags/c/"]],"categories":[[" ",""]],"content":"c语言指针 名 语法 左值 可在‘=‘左边的值，即为可修改的值（或者说变量？） 指针声明 int *p,n; p=&amp;n 统配类指针 void *指针变量名，任何类型的指针都能与 void 类型的指针互相赋值 指针运算 指针的增/减会向前/后跳跃指针类型长度的字节数 数组指针 指针变量名 = 数组起始地址（即数组名） 指针参数 以地址为值传入指针参数，会修改原变量所以称输出参数 返回指针的函数 类型名* 指针变量名（形式参数表） 数组参数 参数形式int arr[] 值 数组地址或者数组名。但一般用指针参数不用数组参数，传值方式一样 动态内存(堆) int *p1 = (int *)malloc(sizeof(int)) int *array = (int *)calloc(10,sizeof(int)) 一定要释放堆需要手动释放堆内存空间，如果在一个函数内开空间函数结束也不会自动释放空间。 释放堆free(p1) 或 free(array) (好习惯：释放完将该指针指向NULL，p1=NULL;) 字符串与指针 char *ch = “hello,world” 此时字符串为常量保存在程序中，然后将字符串首地址存入指针，很像字符数组和指针的关系，但不可修改字符串的内容,且不可输入。如果想要传参，如同一般指针传参就好 参数形式 char *ch，值为保存在指针的地址 ch 函数返回字符串 返回一个存有字符串的动态变量或者全局变量的地址，或者是上一个函数中的局部变量但不能是此函数中的局部变量 指针数组 int *n[数组长度] 多级指针 访问只需要一个*，int x=15, *p=&amp;x, **q=&p; 二级指针q先访问q中的地址，再访问该地址的指针变量存入的地址，共访问两次所以为二级指针。 动态的二维数组 因为二维数组是二级指针，所以将一维数组的指针改为二维即可，即*变为** 定义函数指针 返回类型 (*指针变量)(形式参数表);double (*p2)(int); 赋值函数指针 指针变量名 = 函数名 回调函数 一个函数的参数为函数或函数指针，这个函数参数就称为回调函数。即别的函数执行时调用此函数，此函数称为回调函数 函数指针 数组 (*func[3])()={NULL, add, erase}; 注意事项！！！ 避免使用悬空指针（被释放的动态内存）和未初始化的指针 不同类型的指针之间不能赋值 数组和指针是完全不同的，数组变量存放一组同类元素，指针变量中存放一个地址 值传递是将某个类型的数值传给函数，指针传递是将某个变量的地址传给函数有了指针传递，函数的参数被分为两类：输入参数和输出参数在设计函数原型时，通常将输入参数排在前面，输出参数排在后面。 返回指针的函数必须确保返回值指向的变量在函数执行结束时依然存在 使用动态变量时必须严格防止内存泄露 指针指向的字符串为字符串常量的地址，只可以修改指针的指向，不可修改字符串 "},{"title":"C","date":"2022-02-22T05:20:31.000Z","url":"/C/index.html","categories":[[" ",""]]},{"title":"friends","date":"2022-02-22T05:28:29.000Z","url":"/friends/index.html","categories":[[" ",""]],"content":" # 这是我的 [b站主页]()"},{"title":"search","date":"2022-02-22T05:26:07.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"internet","date":"2022-02-27T11:02:59.000Z","url":"/internet/index.html","categories":[[" ",""]]},{"title":"标签","date":"2022-02-22T05:23:46.000Z","url":"/tags/index.html","categories":[[" ",""]],"content":"Clinux网络sql"},{"title":"linux","date":"2022-02-23T03:20:40.000Z","url":"/linux/index.html","categories":[[" ",""]]},{"title":"sql","date":"2022-03-02T10:21:41.000Z","url":"/sql/index.html","categories":[[" ",""]]}]